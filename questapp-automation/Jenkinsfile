pipeline {
    agent any

    tools {
        maven 'Maven-3.9.10'
        jdk 'JDK-21'
    }

    environment {
        JAVA_HOME = tool('JDK-21')
        MAVEN_HOME = tool('Maven-3.9.10')
        PATH = "${MAVEN_HOME}\\bin;${JAVA_HOME}\\bin;${env.PATH}"

        TEST_BROWSER = 'chrome'
        TEST_HEADLESS = 'true'
        TEST_PARALLEL = 'false'

        TEST_REPORTS = 'test-output\\'
        SUREFIRE_REPORTS = 'target\\surefire-reports\\'
        ALLURE_RESULTS = 'target\\allure-results\\'
        ALLURE_REPORT = 'target\\allure-report\\'

        SLACK_CHANNEL = '#automation'
        EMAIL_RECIPIENTS = 'aravind.ravi@focaloid.com'
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    triggers {
        cron('0 2 * * *')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Init Java') {
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    java -version
                    mvn -version
                '''
            }
        }

        stage('Code Quality') {
            parallel {
                stage('Compile') {
                    steps {
                        bat '''
                            set JAVA_HOME=%JAVA_HOME%
                            set PATH=%JAVA_HOME%\\bin;%PATH%
                            .\\mvnw.cmd clean compile
                        '''
                    }
                }
                stage('Static Analysis') {
                    steps {
                        bat '''
                            set JAVA_HOME=%JAVA_HOME%
                            set PATH=%JAVA_HOME%\\bin;%PATH%
                            .\\mvnw.cmd clean compile test-compile
                        '''
                    }
                }
            }
        }

        stage('Smoke Tests') {
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd clean test -Psmoke -Dtest.headless=true
                '''
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'test-output',
                        reportFiles: 'index.html',
                        reportName: 'Smoke Test Report'
                    ])
                    archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**", allowEmptyArchive: true
                }
            }
        }

        stage('Integration Tests') {
            parallel {
                stage('Chrome Tests') {
                    steps {
                        bat '''
                            set JAVA_HOME=%JAVA_HOME%
                            set PATH=%JAVA_HOME%\\bin;%PATH%
                            .\\mvnw.cmd clean test -Pchrome -Dtest.headless=true
                        '''
                    }
                }
                stage('Headless Chrome Tests') {
                    steps {
                        bat '''
                            set JAVA_HOME=%JAVA_HOME%
                            set PATH=%JAVA_HOME%\\bin;%PATH%
                            .\\mvnw.cmd clean test -Pchrome-headless -Dtest.headless=true
                        '''
                    }
                }
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'test-output',
                        reportFiles: 'index.html',
                        reportName: 'Integration Test Report'
                    ])
                    archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**", allowEmptyArchive: true
                }
            }
        }

        stage('Parallel Tests') {
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd clean test -Pparallel -Dtest.headless=true
                '''
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'test-output',
                        reportFiles: 'index.html',
                        reportName: 'Parallel Test Report'
                    ])
                    archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**", allowEmptyArchive: true
                }
            }
        }

        stage('Regression Tests') {
            when {
                anyOf {
                    branch 'main'
                    expression { env.BUILD_CAUSE == 'TIMERTRIGGER' }
                }
            }
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd clean test -Pregression -Dtest.headless=true
                '''
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'test-output',
                        reportFiles: 'index.html',
                        reportName: 'Regression Test Report'
                    ])
                    archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**", allowEmptyArchive: true
                }
            }
        }

        stage('Security Tests') {
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd clean test -Dtest=SecurityTest -Dtest.headless=true
                '''
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'test-output',
                        reportFiles: 'index.html',
                        reportName: 'Security Test Report'
                    ])
                    archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**", allowEmptyArchive: true
                }
            }
        }

        stage('Performance Tests') {
            when {
                branch 'main'
            }
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd clean test -Dtest=PerformanceTest -Dtest.headless=true
                '''
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'test-output',
                        reportFiles: 'index.html',
                        reportName: 'Performance Test Report'
                    ])
                    archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**", allowEmptyArchive: true
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd allure:report
                '''
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'target/allure-report',
                        reportFiles: 'index.html',
                        reportName: 'Allure Report'
                    ])
                    archiveArtifacts artifacts: "${ALLURE_RESULTS}**, ${ALLURE_REPORT}**", allowEmptyArchive: true
                }
            }
        }

        stage('Cleanup') {
            steps {
                bat '''
                    set JAVA_HOME=%JAVA_HOME%
                    set PATH=%JAVA_HOME%\\bin;%PATH%
                    .\\mvnw.cmd clean
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${TEST_REPORTS}**, ${SUREFIRE_REPORTS}**, ${ALLURE_RESULTS}**, ${ALLURE_REPORT}**", allowEmptyArchive: true
            cleanWs()

            // Mail notifications are disabled until SMTP is configured
            // mail to: "${EMAIL_RECIPIENTS}", subject: "QuestApp Pipeline - ${currentBuild.currentResult}", body: "Build completed with result: ${currentBuild.currentResult}"
        }

        success {
            echo "✅ Pipeline completed successfully!"
        }

        failure {
            echo "❌ Pipeline failed! Check the reports for details."
        }

        unstable {
            echo "⚠️ Pipeline is unstable. Some tests may have failed."
        }
    }
}
